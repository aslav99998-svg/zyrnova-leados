import { Router } from "express"; import fs from "fs"; import path from "path"; import { fileURLToPath } from "url"; import crypto from "crypto";
const r=Router(); const __dirname=path.dirname(fileURLToPath(import.meta.url)); const USERS=path.join(__dirname,"..","data","users.json");
const enc=o=>Buffer.from(JSON.stringify(o)).toString("base64url");
const signJWT=(payload,secret,exp=7*24*3600)=>{ const h={alg:"HS256",typ:"JWT"}; const now=Math.floor(Date.now()/1000); const body={...payload,iat:now,exp:now+exp};
  const p1=enc(h), p2=enc(body); const sig=crypto.createHmac("sha256",secret).update(p1+"."+p2).digest("base64url"); return p1+"."+p2+"."+sig; };
const load=()=>{ try{return JSON.parse(fs.readFileSync(USERS,"utf-8"))}catch{return[]} }; const save=u=>fs.writeFileSync(USERS,JSON.stringify(u,null,2));
const hash=(pw,s=crypto.randomBytes(16).toString("hex"))=>({s,h:crypto.createHmac("sha256",s).update(pw).digest("hex")});
const ok=(pw,s,h)=>crypto.timingSafeEqual(Buffer.from(crypto.createHmac("sha256",s).update(pw).digest("hex")),Buffer.from(h));
r.post("/signup",(req,res)=>{ const {email,password,name}=req.body||{}; if(!email||!password) return res.status(400).json({ok:false,error:"Missing"});
  const u=load(); if(u.find(x=>x.email===email)) return res.status(400).json({ok:false,error:"Exists"}); const t=hash(password); const user={id:String(Date.now()),email,name:name||"",salt:t.s,hash:t.h,subscriptionStatus:"none"}; u.push(user); save(u);
  const token=signJWT({uid:user.id,email},process.env.JWT_SECRET||"dev_secret"); res.cookie("auth",token,{httpOnly:true,sameSite:"lax"}); res.json({ok:true,user:{id:user.id,email:name||""}}); });
r.post("/login",(req,res)=>{ const {email,password}=req.body||{}; const u=load(); const usr=u.find(x=>x.email===email); if(!usr) return res.status(400).json({ok:false,error:"Invalid"});
  if(!ok(password,usr.salt,usr.hash)) return res.status(400).json({ok:false,error:"Invalid"}); const token=signJWT({uid:usr.id,email},process.env.JWT_SECRET||"dev_secret");
  res.cookie("auth",token,{httpOnly:true,sameSite:"lax"}); res.json({ok:true,user:{id:usr.id,email:usr.email,name:usr.name}}); });
r.get("/me",(req,res)=>{ const t=req.cookies?.auth; if(!t) return res.json({ok:false}); try{ const payload=JSON.parse(Buffer.from(t.split(".")[1],"base64url").toString("utf-8"));
  const u=load().find(x=>x.id===payload.uid); if(!u) return res.json({ok:false}); res.json({ok:true,user:{id:u.id,email:u.email,name:u.name,subscriptionStatus:u.subscriptionStatus}}); }catch{ res.json({ok:false}); } });
r.post("/logout",(_req,res)=>{ res.clearCookie("auth"); res.json({ok:true}); });
export default r;
